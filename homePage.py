from datetime import datetime, time #as dt_time  # Garde time tel quel
#from datetime import timedelta # Importer la classe time sous un alias
import time
#from sklearn.metrics import mean_absolute_error
import streamlit as st
import utilsPython as utils # type: ignore
import utilsPreprocess as preproc # type: ignore
import utilsGraph as graph # type: ignore
import modelisation as modelisation # type: ignore
from config import Config
import streamlit.components.v1 as components
from streamlit_folium import st_folium
import pandas as pd
# Pour √©viter d'avoir les messages warning
import warnings
warnings.filterwarnings('ignore')

# Personnalisation de la page streamlit
st.markdown(
    """
    <style>
        /* Largeur de la zone centrale */
        .main {
            max-width: 65% !important; 
            margin-left: auto;
            margin-right: auto;
        }

        /* Pour les pages d'index (si besoin) */
        .block-container {
            max-width: 65% !important;  
        }

        /* R√©duire la taille des graphiques */
        .stImage {
            width: 600px;  /* R√©duire la largeur de l'image */
            height: auto;
        }

        /* Ajuster la taille de l'expander header */
        .streamlit-expanderHeader {
            font-size: 16px !important;
        }

        /* Ajuster l'affichage des graphiques matplotlib */
        .stPlot {
            width: 1000px;  /* Ajuster la largeur du graphique */
            height: auto;
        }

    </style>
    """, unsafe_allow_html=True
)

#on evite de refaire les difff√©rents dataframe s'ils sont d√©j√† en session
if 'df_merged_cleaned_final' not in st.session_state: # 60 secondes
    # Si pas encore dans session_state, faire les calculs
    df = utils.load_data(Config.FILE_PATH + Config.FILE, ";",0) 
    df_m = utils.load_data(Config.FILE_PATH + Config.FILE_METEO, ',', 2)	
    df_v = utils.load_data(Config.FILE_PATH + Config.FILE_VAC, ',', 0)
    df_f = utils.load_data(Config.FILE_PATH + Config.FILE_FERIE, ',', 0)
    df_p = utils.load_data(Config.FILE_PATH + Config.FILE_PHOTO, ',', 0)
    df_ir = utils.load_data(Config.FILE_PATH + Config.FILE_TRAVAUX, ';', 0)
    df_cleaned = preproc.preprocess_cyclisme(df)
    df_m_cleaned = preproc.preprocess_meteo(df_m)
    df_vjf_cleaned = preproc.preprocess_vacancesferie(df_v,df_f)
    df_p_cleaned = preproc.preprocess_photo(df_p)
    df_merged = utils.merge(df_cleaned,df_m_cleaned,df_vjf_cleaned,df_p_cleaned,df_ir)
    df_merged_cleaned = preproc.corriger_comptage(df_merged) 
    df_merged_cleaned_final = preproc.correctionDataviz(df_merged_cleaned) 

    st.session_state.df = df
    st.session_state.df_m = df_m 
    st.session_state.df_v = df_v
    st.session_state.df_f = df_f 
    st.session_state.df_p = df_p 
    st.session_state.df_ir = df_ir
    st.session_state.df_cleaned = df_cleaned
    st.session_state.df_m_cleaned = df_m_cleaned
    st.session_state.df_vjf_cleaned = df_vjf_cleaned
    st.session_state.df_p_cleaned = df_p_cleaned
    st.session_state.df_merged = df_merged
    st.session_state.df_merged_cleaned = df_merged_cleaned
    st.session_state.df_merged_cleaned_final = df_merged_cleaned_final
else:  #0 seconde
    # Sinon, r√©cup√©rer les donn√©es depuis session_state
    df =st.session_state.df
    df_m = st.session_state.df_m
    df_v = st.session_state.df_v
    df_f = st.session_state.df_f
    df_vjf_cleaned = st.session_state.df_vjf_cleaned
    df_p_cleaned = st.session_state.df_p_cleaned
    df_ir= st.session_state.df_ir
    df_merged = st.session_state.df_merged
    df_merged_cleaned = st.session_state.df_merged_cleaned
    df_merged_cleaned_final = st.session_state.df_merged_cleaned_final 


#affichage de l'image
st.image(Config.IMAGE, width=400) 

#titre et sommaire
st.title("Trafic cycliste √† PARIS")
st.sidebar.title("Sommaire")
pages=["Pr√©sentation du sujet","Exploration", "DataVizualization", "Mod√©lisation","Pr√©diction"]
page=st.sidebar.radio("Aller vers", pages, key='menu_principal')

#ce qui s'affiche si l 'option 1 de pages est s√©lectionn√©
if page == pages[0] : #0seconde
  st.write("### Pr√©sentation")
  st.markdown(Config.PRESENTATION, unsafe_allow_html=True)

  st.markdown('<p style="margin-bottom: 0px;font-size:12px; font-style:italic;">Bootcamp Analystics Enginner JAN2025', unsafe_allow_html=True)
  st.markdown('<p style="font-size:12px; font-style:italic;">Aur√©lie Guilhem - Ingrid Plessis - Nicolas Couvez - Marie Pirao', unsafe_allow_html=True)

  st.markdown(f'<p style="margin-bottom: 0px;">Source √† exploiter : {Config.FILE}</p>', unsafe_allow_html=True)
  st.markdown('<p style="font-size:12px; font-style:italic;">source : <a href="https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs" target="_blank">https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs</a></p>', unsafe_allow_html=True)

  if st.checkbox("Afficher les donn√©es externes", key='page1') : # sinon les chekbox de toute l'appli sont li√©es
    st.markdown(f'<p style="margin-left: 50px;margin-bottom: 0px;">üå§Ô∏è Donn√©es m√©t√©orologiques :  {Config.FILE_METEO}</p>', unsafe_allow_html=True)
    st.markdown('<p style="margin-left: 50px;font-size:12px; font-style:italic;">source : <a href="https://www.data.gouv.fr/fr/organizations/meteo-france/" target="_blank">https://www.data.gouv.fr/fr/organizations/meteo-france/</a></p>', unsafe_allow_html=True)

    st.markdown(f'<p style="margin-left: 50px;margin-bottom: 0px;">üèñÔ∏è Donn√©es vacances scolaires :  {Config.FILE_VAC}</p>', unsafe_allow_html=True)
    st.markdown('<p style="margin-left: 50px;font-size:12px; font-style:italic;">source : <a href="https://www.data.gouv.fr/fr/datasets/calendrier-scolaire/" target="_blank">https://www.data.gouv.fr/fr/datasets/calendrier-scolaire/</a></p>', unsafe_allow_html=True)
    
    st.markdown(f'<p style="margin-left: 50px;margin-bottom: 0px;">üéå Donn√©es jours f√©ri√© :  {Config.FILE_FERIE}</p>', unsafe_allow_html=True)
    st.markdown('<p style="margin-left: 50px;font-size:12px; font-style:italic;">source : <a href="https://www.data.gouv.fr/fr/datasets/jours-feries-en-france/" target="_blank">https://www.data.gouv.fr/fr/datasets/jours-feries-en-france/</a></p>', unsafe_allow_html=True)
    
    st.markdown(f'<p style="margin-left: 50px;margin-bottom: 0px;">üì∏ Donn√©es detail photo :  {Config.FILE_PHOTO}</p>', unsafe_allow_html=True)
    st.markdown('<p style="margin-left: 50px;font-size:12px; font-style:italic;">source : effectu√© manuellement', unsafe_allow_html=True)
        
    st.markdown(f'<p style="margin-left: 50px;margin-bottom: 0px;">:üöß Donn√©es detail travaux ou bloquage des JO :  {Config.FILE_TRAVAUX}</p>', unsafe_allow_html=True)
    st.markdown('<p style="margin-left: 50px;font-size:12px; font-style:italic;">source : effectu√© manuellement', unsafe_allow_html=True)

    
#ce qui s'affiche si l 'option 1 de pages est s√©lectionn√©
if page == pages[1] : #4 seconde
  start_time = time.time()
  print("debut page 1 ", time.ctime(start_time))  
  st.write("### Exploration des donn√©es")
  titres_onglets2 = ['Visualisation des donn√©es', 'Travail de nettoyage', 'Analyse sp√©cifique de certains compteurs', 'DataframeFinal']
  ongletA, ongletB,ongletC, ongletD = st.tabs(titres_onglets2)

# ONglet de pr√©sentation des diff√©rents dataframes cr√©√©s 
  with ongletA:  
    st.subheader("Aper√ßu du jeu de donn√©e")
    st.dataframe(df.head(5))  # Affichage de l'apercu du dataframe initial

    st.subheader("Informations sur le jeu de donn√©e")
    info_dict_aff = utils.informationDF(df)
    st.dataframe(info_dict_aff)
    st.markdown(Config.OBSERVATION_DF, unsafe_allow_html=True)

    if st.checkbox("Afficher les donn√©es externes", key='ongletA') :
      st.subheader("Aper√ßu du jeu de donn√©e externes")
      
      st.write("Donn√©es m√©t√©orologiques")
      st.dataframe(df_m.head())
      st.markdown(Config.OBSERVATION_METEO, unsafe_allow_html=True)

      st.write("Donn√©es vacances scolaire")
      st.dataframe(df_v.head())
      st.markdown(Config.OBSERVATION_VAC, unsafe_allow_html=True)

      st.write("Donn√©es jours f√©ri√©")
      st.dataframe(df_f.head())
      st.markdown(Config.OBSERVATION_JF, unsafe_allow_html=True)

      st.write("Donn√©es detail photo")
      st.dataframe(df_p_cleaned.head())
      st.markdown(Config.OBSERVATION_PHOTO, unsafe_allow_html=True)

      st.write("Donn√©es blocage rue")
      st.dataframe(df_ir.head())
      st.markdown(Config.OBSERVATION_TRAVAUX, unsafe_allow_html=True)
      
  # Ajouter du contenu √† chaque onglet
  with ongletB: 
    #analyse de la dsitribution des compteurs selon les mois/ann√©e et conclusion
    st.subheader("Analyse de la r√©partition des compteurs")
    fig = graph.plot_avg_mensuel(df,"all")
    st.plotly_chart(fig)
    st.markdown(Config.CONCLUSION_REPARTITION, unsafe_allow_html=True)

    #analyse du compteur de la Grande Arm√©e pour montrer qu'il faudra corriger certains compteurs
    st.subheader("Analyse du compteur : Grande Arm√©e")
    fig = graph.plot_avg_mensuel(df,"GrandeArmee")
    st.plotly_chart(fig)
    st.markdown(Config.CONCLUSION_GA, unsafe_allow_html=True)

    #Analyse des lignes manaquantes pour un dataframe complet sur la dur√©e
    st.subheader("Compteurs ayant des lignes manquantes sur 2024/2025")
    fig = graph.nbLigne_compteur(df)
    st.plotly_chart(fig)
    st.markdown(Config.CONCLUSION_NBLIGNE, unsafe_allow_html=True)

    #Analyse des valeurs manquantes
    if st.checkbox("Afficher les NA", key='ongletB') :
      st.subheader("R√©partition des donn√©es manquantes sur les compteurs")
      fig = graph.heatmap_isna(df)
      st.pyplot(fig)
      st.markdown(Config.CONCLUSION_NAN, unsafe_allow_html=True)


  with ongletC: 
    st.markdown("### Impact des JO sur le trafic cycliste")
    fig = graph.px_compteurs_mensuel_JO(df_merged)
    st.plotly_chart(fig)
    
    st.markdown(Config.EXPLICATIONJO, unsafe_allow_html=True)

    st.markdown("### Moyenne journali√®re √† 0 sur le trafic cycliste")
    Compteur = ['10 avenue de la Grande Arm√©e SE-NO','106 avenue Denfert Rochereau NE-SO','135 avenue Daumesnil SE-NO','24 boulevard Jourdan E-O',
                '33 avenue des Champs Elys√©es NO-SE','38 rue Turbigo','boulevard Richard Lenoir','Pont des Invalides',
                "27 quai de la Tournelle","7 avenue de la Grande Arm√©e NO-SE",
                "Porte des Ternes", "Face au 48 quai de la marne",
                "Totem 73 boulevard de S√©bastopol"]
    # Liste d√©roulante pour choisir un compteur
    selected_compteur = st.selectbox("S√©lectionnez un compteur",options=Compteur,index=0)  # Par d√©faut, s√©lectionner le premier compteur
    fig = graph.px_compteurs_quotidien_0(df_merged, selected_compteur)
    st.plotly_chart(fig, use_container_width=True)
    explication0 = ''''''
    if (selected_compteur == '24 boulevard Jourdan E-O'):
      explication0 = '''Des travaux ont eu lieu sur le boulevard Jourdan √† Paris entre le 3 octobre et le 18 d√©cembre 2024. 
      Ces travaux comprenaient la r√©alisation d'un quai bus d√©port√©, l'installation de s√©parateurs et de balises, ainsi que des op√©rations de marquage et de reprise de trottoir. '''
    elif (selected_compteur == '10 avenue de la Grande Arm√©e SE-NO'):
      explication0 = '''Des restrictions de circulation ont √©t√© mises en place √† Paris en pr√©paration des festivit√©s du Nouvel An, notamment le 31 d√©cembre 2024. 
      Un arr√™t√© municipal a interdit la circulation de tout v√©hicule √† partir du 31 d√©cembre 2024 √† 16h00 jusqu'au 1er janvier 2025 √† 04h00 dans les 8·µâ, 16·µâ et 17·µâ arrondissements de Paris, 
      incluant des zones comme l'avenue de la Grande Arm√©e. '''
    elif (selected_compteur == '135 avenue Daumesnil SE-NO'):
      explication0 = '''Des travaux ont eu lieu sur l'avenue Daumesnil √† Paris entre le 29 janvier et le 15 mars 2024, affectant la circulation des v√©los. 
      Ces travaux comprenaient la remise en √©tat des bandes stabilis√©es et la cr√©ation d'accroches v√©los sur les trottoirs, avec des impacts principalement sur le trottoir 
      et un cheminement pi√©ton prot√©g√© tout au long du chantier.'''
    elif (selected_compteur == '33 avenue des Champs Elys√©es NO-SE'):
      explication0 = '''?????'''
    elif (selected_compteur == '38 rue Turbigo'):
      explication0 = '''?????'''
    elif (selected_compteur == '106 avenue Denfert Rochereau NE-SO'):
      explication0 = '''La borne semble hors service, nous d√©cidons de la retirer de notre analyse'''
    elif (selected_compteur == 'boulevard Richard Lenoir'):
      explication0 = '''Il y a un compteur dans chaque sens. Puisque la borne a compt√© correctement dans un sens. Nous sommes en droit de penser que la borne √† √©tait inop√©rante √† ce moment l√†'''
    elif (selected_compteur == 'Pont des Invalides'):
      explication0 = '''Il y a un compteur dans chaque sens. Puisque la borne a compt√© correctement dans un sens. Nous sommes en droit de penser que la borne √† √©tait inop√©rante √† ce moment l√†'''
    elif (selected_compteur == '27 quai de la Tournelle'):
      explication0 = '''La r√©ouverture de la cath√©drale Notre-Dame de Paris a eu lieu le 8 d√©cembre 2024, avec des c√©r√©monies officielles le 7 d√©cembre. 
      Ces √©v√©nements ont entra√Æn√© des restrictions de circulation dans un large p√©rim√®tre autour de la cath√©drale, notamment sur les quais hauts, incluant les pistes cyclables'''          
    elif (selected_compteur == '"7 avenue de la Grande Arm√©e NO-SE'):
      explication0 = '''?????'''                
    elif (selected_compteur == '"Porte des Ternes'):
      explication0 = '''Il y a un compteur dans chaque sens. Puisque la borne a compt√© correctement dans un sens. Nous sommes en droit de penser que la borne √† √©tait inop√©rante √† ce moment l√†'''
    elif (selected_compteur == 'Face au 48 quai de la marne'):
      explication0 = '''?????'''
    elif (selected_compteur == '"Totem 73 boulevard de S√©bastopol'):
      explication0 = '''Il y a un compteur dans chaque sens. Puisque la borne a compt√© correctement dans un sens. Nous sommes en droit de penser que la borne √† √©tait inop√©rante √† ce moment l√†'''
    st.markdown(explication0, unsafe_allow_html=True)

    #Analkyse cibl√© sur valeur abh√©rrante
    st.markdown("### Distribution de la variable comptage_horaire des v√©los")
    fig = graph.boxplot(df_merged['comptage_horaire'])
    st.pyplot(fig)
    abherrante0 = '''On voit tr√®s nettement une valeur extr√™me ou m√™me abherrante. 
    Ce qui nous incite a analyser ce compteur ce jour-l√†'''
    st.markdown(abherrante0, unsafe_allow_html=True)

    fig1 = graph.plot_abherrante(df_merged)
    st.plotly_chart(fig1, key="graph_abherrante_1")
    abherrante1 = '''Nous pouvons d√©duire que la borne ne fonctionnait pas du 05/01/2024 √† 01H au 06/05/2025 √† 6H.
    La valeur de 3070 est donc une valeur aberrante. Nous choisirons pour ce jour de prendre les m√™mes valeurs que le dimanche pr√©c√©dent.'''
    st.markdown(abherrante1, unsafe_allow_html=True)

    correct = '''Proposition de correction : Nous allons reprendre les donn√©es d'un autre jour sur le meme compteur en respectant le jour de la smeaine et les heures : 
    periode utilis√©e du 2024-12-29 01:00 au 2024-12-30 06:00
    periode √† corriger du 2025-01-05 01:00 au 2025-01-06 06:00'''

    st.markdown(correct, unsafe_allow_html=True)
    fig2 = graph.plot_abherrante(df_merged_cleaned)
    st.plotly_chart(fig2, key="graph_abherrante_2")
    fig = graph.boxplot(df_merged_cleaned['comptage_horaire'])
    st.pyplot(fig)

  with ongletD: #2seconde
    st.markdown("### Dataframe final")
    st.dataframe(df_merged_cleaned_final.head(5))
  start_time = time.time()
  print("fin page 1 ", time.ctime(start_time))  


#ce qui s'affiche si l 'option 2 de pages est s√©lectionn√©
if page == pages[2] : 
  start_time = time.time()
  print("d√©but chargement 2e  page", time.ctime(start_time))  
  st.write("### DataVizualization")
  titres_onglets = ['Univari√©','Multivari√©','Analyse choix du mod√®le']
  onglet1, onglet2, onglet3 = st.tabs(titres_onglets)
 
  with onglet1:
    st.markdown("### Carte des Bornes de Comptage V√©lo")
    map_file = graph.generate_folium_map(df_merged,"carte_bornes_velos.html")
    # Afficher la carte dans Streamlit
    with open(map_file, "r", encoding="utf-8") as f:
      html_code = f.read()
    components.html(html_code, height=600)

    st.markdown("### Trafic cycliste quotidien √† Paris entre 01/2024 et 01/2025")
    fig = graph.journalyCount(df_merged)
    st.pyplot(fig)
    st.markdown("### Top10 et Flop10 des Bornes selon le passages horaires moyen")
    fig,fig1 = graph.top10Flop10(df_merged)
    st.pyplot(fig)
    st.pyplot(fig1)

  with onglet2:
    st.write("Nombre de passages de v√©los selon l'heure et la temp√©rature")
    period_selector = st.selectbox("S√©lectionnez la p√©riode", options=['semaine', 'week-end'], index=0)

    # G√©n√©rer et afficher le graphique en fonction de la s√©lection
    fig = graph.filter_data(period_selector, df_merged_cleaned_final)
    st.plotly_chart(fig)

    st.write("Moyenne des passages de v√©los en Fonction des Conditions M√©t√©orologiques")
    fig = graph.go_bar_meteo(df_merged)
    st.plotly_chart(fig)
    fig = graph.sns_scatter_meteo(df_merged)
    st.pyplot(fig)
    st.write("Analyse de l'impact du jour ou de la nuit sur le nombre de passages")
    fig = graph.dayNight(df_merged)
    st.plotly_chart(fig)
    st.markdown("### Distribution du trafic v√©lo selon la temp√©rature")
    fig = graph.boxplotTemperature(df_merged)
    st.pyplot(fig)
    st.markdown("### Distribution du trafic v√©lo selon la vitesse du vent")
    fig = graph.boxplotVent(df_merged)
    st.pyplot(fig)
 
    st.markdown("###Diagramme de correlation entre les vacances et le nombre de passages")
    fig = graph.boxplot_vacances1(df_merged_cleaned)
    st.pyplot(fig)
    conclusionVacances = '''Vu le r√©sultat de ce graph,nous pouvons clairement affirmer que la zone n'a pas d'influence.
    nous allons donc merger les 3 colonnes pour la suite de l'analyse '''
    st.markdown(conclusionVacances, unsafe_allow_html=True)

  with onglet3: #5 seconde
    st.write('Diagramme de correlation entre les variables')
    fig = graph.plot_heatmap(df_merged_cleaned_final)
    st.pyplot(fig)
    st.write("Graphique de l'importance des variables en nous basant sur RandomForest")
    model3, X_train, feats = modelisation.modelisationRFBase(df_merged_cleaned_final)
    fig = graph.plot_feature_importances_RF(model3,X_train,feats)
    st.pyplot(fig)  
  start_time = time.time()
  print("debut page 2 ", time.ctime(start_time)) 

#ce qui s'affiche si l 'option 2 de pages est s√©lectionn√©
if page == pages[3] : 
  start_time = time.time()
  print("d√©but chargement 3e  page", time.ctime(start_time))  
  sous_menus = ["Mod√©lisation Regressor", "Mod√©lisation Temporelle"]
  sous_menu = st.sidebar.radio("Choisissez un type de mod√©lisation", sous_menus, key='sous_menu')

  if sous_menu == sous_menus[0]:
    #utilisation de mod√®les sur dataframe classique
    st.write("### Mod√®les Regressor")
    start_time = time.time()
    print("d√©but menu0 ", time.ctime(start_time))  

    #listCompteur = ['All'] + utils.searchUnique(df_merged_cleaned_final, 'nom_compteur').tolist()
    #nom_compteur_selectionne = st.selectbox('S√©lectionnez un nom de compteur', options=listCompteur)
    #st.write('Le compteur choisi est :', nom_compteur_selectionne )
    nom_compteur_selectionne = 'All'

    choix = ['StackingRegressor','XGBRegressor','Random Forest Regressor']
    option = st.selectbox('Choix du mod√®le', choix)
    st.write('Le mod√®le choisi est :', option)
    #pr√©process sp√©cique pour les mod√®les XGBRegressor et StackingRegressor
    if option in ['StackingRegressor','XGBRegressor']:
      start_time = time.time()
      print(f'debut modelisation {option} : {time.ctime(start_time)}') 
      clf, X_train, X_test, y_train, y_test  = modelisation.modelisation(df_merged_cleaned_final, option)
      start_time = time.time()
      print(f'fin modelisation {option} : {time.ctime(start_time)}')
      #mae = mean_absolute_error(y_pred, y_test)
      #st.write("MAE Sur les donn√©es de test :",mae)
    #pr√©process sp√©cique pour les mod√®les Random Forest Regressor','BaggingRegressor', 'DecisionTreeRegressor
    else:
      start_time = time.time()
      print(f'debut modelisation {option} : {time.ctime(start_time)}') 
      clf, X_train, X_test, y_train, y_test = modelisation.modelisation1(df_merged_cleaned_final,nom_compteur_selectionne, option)
      start_time = time.time()
      print(f'fin modelisation {option} : {time.ctime(start_time)}') 
    display = st.radio('Que souhaitez-vous montrer ?', ('metrique MAE','score (R¬≤)', 'Nuage de point de pr√©diction'))
    if display == 'metrique MAE':
      start_time = time.time()
      print(f'debut scores MAE {option} : {time.ctime(start_time)}') 
      trainMae,testMae = modelisation.scores(clf, display, X_train, X_test, y_train, y_test)
      st.write("Sur les donn√©es d'entrainement :",trainMae)
      st.write("Sur les donn√©es de test :",testMae)
      start_time = time.time()
      print(f'fin scores MAE {option} : {time.ctime(start_time)}') 
    elif display == 'score (R¬≤)':
      start_time = time.time()
      print(f'debut scores R¬≤ {option} : {time.ctime(start_time)}') 
      trainScore,testScore = modelisation.scores(clf, display,X_train, X_test, y_train, y_test)
      st.write("Sur les donn√©es d'entrainement :",trainScore)
      st.write("Sur les donn√©es de test :",testScore)
      start_time = time.time()
      print(f'fin scores R¬≤ {option} : {time.ctime(start_time)}') 
    elif display == 'Nuage de point de pr√©diction':
      start_time = time.time()
      print(f'debut pix_prediction {option} : {time.ctime(start_time)}') 
      fig = graph.pix_prediction(clf, X_test,y_test)
      st.pyplot(fig)
      start_time = time.time()
      print(f'debut pix_prediction {option} : {time.ctime(start_time)}') 
    start_time = time.time()
    print("fin chargement menu0  page", time.ctime(start_time))  
    
    
  if sous_menu == sous_menus[1]:
    #prise en compte des specificit√©s des donn√©es temporelle
    st.write("### Mod√®les temporelles")
    start_time = time.time()
    print("debut chargement menu1  page", time.ctime(start_time))

    listCompteur2 = ["10 avenue de la Grande Arm√©e SE-NO","16 avenue de la Porte des Ternes E-O","18 quai de l'H√¥tel de Ville NO-SE",
                  "147 avenue d'Italie S-N","27 boulevard Davout N-S"]
    models = modelisation.modelisationT(df_merged_cleaned_final, listCompteur2)
    compteur = st.selectbox("Choisissez le nom du compteur", listCompteur2)
    st.write(f"Le compteur choisi est : {compteur}")

    # Extraire les donn√©es, former et √©valuer le mod√®le
    model = models[compteur]['model']
    test_data = models[compteur]['test_data']
    train_data = models[compteur]['train_data']
  
    test_data, test_predictions, mae = modelisation.predict_and_evaluate(model, train_data,test_data)
    
    # Afficher le MAE
    st.write(f"Mean Absolute Error (MAE) pour le compteur {compteur}: {mae}")

    # G√©n√©rer et afficher le graphique
    fig = graph.generate_graph_Tempo(test_data, test_predictions, compteur)
    st.pyplot(fig)
    start_time = time.time()
    print("fin chargement menu1  page", time.ctime(start_time))  
  start_time = time.time()
  print("fin chargement 3e  page", time.ctime(start_time))  


  #ce qui s'affiche si l 'option 2 de pages est s√©lectionn√©
if page == pages[4] : 
  start_time = time.time()
  print("d√©but chargement 4e  page", time.ctime(start_time))  

  st.write("### Pr√©diction")

  titres_onglets4 = ['Pr√©diction VS r√©alit√©', 'Pr√©diction √† 3 jours']
  onglet10, onglet11= st.tabs(titres_onglets4)

  with onglet10 :

    df_fev = utils.load_data(Config.FILE_PATH + Config.FILE_FEVRIER, ",",0) 
    date_debut = datetime(2025, 2, 1,0,0)
    date_limite = datetime(2025, 2, 28, 0, 0).date()

    # Cr√©er deux colonnes pour les boutons
    col1, col2 = st.columns(2)
    with col1:
      date_debut_choisie = st.date_input("Choisissez une date de d√©but", min_value=date_debut, max_value=date_limite) 
      date_debut_choisie = datetime.combine(date_debut_choisie, datetime.min.time())
    with col2:
      date_fin_choisie = st.date_input("Choisissez une date de fin", min_value=date_debut, max_value=date_limite)
      date_fin_choisie = datetime.combine(date_fin_choisie, datetime.min.time())
  
    mod√®les = ['XGBRegressor','StackingRegressor','Random Forest Regressor', 'Prophet']
    modelChoisi = st.selectbox('Choix du mod√®le', mod√®les)
    st.write('Le mod√®le choisi est :', modelChoisi)

    listCompteur2 = ['All',"10 avenue de la Grande Arm√©e SE-NO","16 avenue de la Porte des Ternes E-O","18 quai de l'H√¥tel de Ville NO-SE",
                    "147 avenue d'Italie S-N","27 boulevard Davout N-S"]
    #models = modelisation.modelisationT(df_merged_cleaned_final, listCompteur2)
    compteur = st.selectbox("Choisissez le nom du compteur", listCompteur2)
    st.write(f"Le compteur choisi est : {compteur}")
    #if modelChoisi == 'Prophet':
    #  infoModelCompteur = models[compteur]
    #else:
    #  infoModelCompteur = {}

    # Cr√©er un bouton "Lancer la pr√©diction" dans la premi√®re colonne
    if st.button("Lancer la pr√©diction"):
        if date_debut_choisie and date_fin_choisie:
            # Appeler la m√©thode de pr√©diction en passant la date et l'heure choisie
            df_f√©vrier = modelisation.predictionModel(modelChoisi, df_fev)
            # Afficher les r√©sultats sous le premier bouton
            st.subheader("Comparaison entre pr√©diction et r√©alit√© du comptage cycliste en F√©vrier 2025")
            fig = graph.courbePrediction(df_f√©vrier, compteur, date_debut_choisie,date_fin_choisie)
            st.pyplot(fig)

        else:
            st.warning("Veuillez s√©lectionner une date et une heure avant de lancer la pr√©diction.")

  with onglet11 :
    st.subheader("Pr√©diction √† 3J")
    st.markdown(Config.PREDICTION3J, unsafe_allow_html=True)
    st.image(Config.EXEMPLE, width=800)

    st.subheader("Lancez une pr√©diction !")
    #mod√®les = ['XGBRegressor','StackingRegressor','Random Forest Regressor', 'Prophet']
    #modelChoisi = st.selectbox('Choix du mod√®le', mod√®les, key='onglet11')
    listCompteur2 = ['All'] + utils.searchUnique(df_merged_cleaned_final, 'nom_compteur').tolist()
    compteur = st.selectbox("Choisissez le nom du compteur", listCompteur2, key='onglet11_1')
    st.write(f"Le compteur choisi est : {compteur}")

    # Cr√©er un bouton "Lancer la pr√©diction" dans la premi√®re colonne
    if st.button("Lancer la pr√©diction", key='onglet11_2'):
        # Appeler la m√©thode de pr√©diction en passant la date et l'heure choisie
        df3J = modelisation.prediction3JModel(modelChoisi, df_merged_cleaned_final,df_vjf_cleaned)
        # Afficher les r√©sultats sous le premier bouton
        st.markdown("Pr√©dictions des 3 prochains jours sur l'ensemble des compteurs")
        fig = graph.courbePrediction3J(df3J, compteur)
        st.pyplot(fig)

  start_time = time.time()
  print("fin chargement 4e  page", time.ctime(start_time))  